{"version":3,"sources":["Components/Popup.js","Components/AI.js","App.js","serviceWorker.js","index.js"],"names":["Popup","className","this","props","playerChoice","computerChoice","winner","React","Component","AI","prechoice","App","state","player","computer","playerValue","computerValue","showPopup","choice","handleClick","bind","id","getComputerChoice","getWinner","whoWon","setState","setTimeout","rand","Math","random","p","c","class","onClick","style","textAlign","pop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d4bd043.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nclass Popup extends React.Component {\r\n  render() {\r\n\r\n    return (\r\n      \r\n      <div className=\"popup\">\r\n        <div className=\"popup_inner\">\r\n          <p>Player Choice: {this.props.playerChoice}</p>\r\n          <p>Computer Choice: {this.props.computerChoice}</p>\r\n          {this.props.winner === \"computer\"?\r\n           <div className = \"text-lose\"> <p>Winner: {this.props.winner}</p>\r\n           </div>\r\n           : (this.props.winner === \"player\") ?<div className = \"text-win\"> <p>Winner: {this.props.winner}</p>\r\n           </div>\r\n           : <div className = \"text-draw\"> <p>Winner: {this.props.winner}</p>\r\n           </div>\r\n           \r\n           }\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Popup;\r\n","import React from \"react\";\r\nimport { FaHandScissors, FaFistRaised, FaHandPaper } from \"react-icons/fa\";\r\nimport \"../App.css\";\r\n\r\nclass AI extends React.Component {\r\n  render() {\r\n\r\n    return (      \r\n        <div>\r\n            {this.props.prechoice === \"rock\" ?<div>\r\n          <FaFistRaised className = \"FaHand\" />\r\n        </div> : null}\r\n\r\n        {this.props.prechoice === \"paper\" ?<div>\r\n          <FaHandPaper className = \"FaHand\"/>\r\n        </div> : null}\r\n\r\n        {this.props.prechoice === \"scissors\" ?<div>\r\n          <FaHandScissors className = \"FaHand\" />\r\n        </div> : null}\r\n        </div>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nexport default AI;\r\n","import React from \"react\";\r\nimport Popup from \"./Components/Popup\";\r\nimport AI from \"./Components/AI\";\r\nimport { FaHandScissors, FaFistRaised, FaHandPaper } from \"react-icons/fa\";\r\nimport \"./App.css\";\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      player: 0,\r\n      computer: 0,\r\n      playerValue: \"\",\r\n      computerValue: \"\",\r\n      winner: \"\",\r\n      prechoice: \"\",\r\n      showPopup: false,\r\n      choice : false\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(id) {\r\n\r\n    let playerValue = id\r\n    let computerValue = this.getComputerChoice();\r\n    let winner = this.getWinner(playerValue, computerValue);\r\n    this.whoWon(winner);\r\n    this.setState({\r\n      prechoice : computerValue,\r\n      computerValue,\r\n      playerValue,\r\n      winner,\r\n      showPopup: !this.state.showPopup,\r\n      choice: false\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({\r\n        showPopup: false\r\n      });\r\n     }, 4000);\r\n    }\r\n \r\n  pop()\r\n{\r\n  setTimeout(() => {  \r\n    this.setState({\r\n      choice: true\r\n    }); \r\n  },3050) \r\n}\r\n\r\n\r\n\r\n  whoWon(winner) {\r\n    if (winner === \"player\") {\r\n      this.setState(state => {\r\n        return { player: state.player + 1 };\r\n      });\r\n    } else if (winner === \"computer\") {\r\n      this.setState(state => {\r\n        return { computer: state.computer + 1 };\r\n      });\r\n    }\r\n  }\r\n  getComputerChoice() {\r\n    const rand = Math.random();\r\n    if (rand < 0.34) {\r\n      return \"rock\";\r\n    } else if (rand <= 0.67) {\r\n      return \"paper\";\r\n    } else {\r\n      return \"scissors\";\r\n    }\r\n  }\r\n\r\n  // Get game winner\r\n  getWinner(p, c) {\r\n    if (p === c) {\r\n      return \"draw\";\r\n    } else if (p === \"rock\") {\r\n      if (c === \"paper\") {\r\n        return \"computer\";\r\n      } else {\r\n        return \"player\";\r\n      }\r\n    } else if (p === \"paper\") {\r\n      if (c === \"scissors\") {\r\n        return \"computer\";\r\n      } else {\r\n        return \"player\";\r\n      }\r\n    } else if (p === \"scissors\") {\r\n      if (c === \"rock\") {\r\n        return \"computer\";\r\n      } else {\r\n        return \"player\";\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n    \r\n  \r\n  render() {\r\n\r\n    return (\r\n      <>\r\n\r\n          <div class=\"container mt-3\">\r\n<div class=\"d-flex justify-content-center bg-secondary mb-3\">\r\n    <div class=\"p-2\">\r\n    <header className=\"header\">\r\n            <h1>Rock Paper Scissors</h1>\r\n            <button id=\"restart\" className=\"restart-btn\">\r\n              Restart Game\r\n            </button>\r\n            <div id=\"score\" className=\"score\">\r\n              <p>Player: {this.state.player}</p>\r\n              <p>Computer: {this.state.computer}</p>\r\n            </div>\r\n          </header>\r\n\r\n          <h2>Make Your Selection</h2>\r\n          <h3 > PLAYER </h3>\r\n          <br></br>\r\n\r\n          </div>       \r\n       </div>\r\n        </div>\r\n\r\n\r\n          <div class=\"container-fluid\">\r\n  <div class=\"row\">\r\n  <div className=\"choices\">\r\n    <div class=\"col-4\"><div id=\"rock\" className=\"choice\" onClick={() => this.handleClick('rock')}>\r\n              <FaFistRaised className = \"FaHand\"/>\r\n            </div></div>\r\n    <div class=\"col-4]\"> <div id=\"paper\" className=\"choice\" onClick={() => this.handleClick('paper')}>\r\n              <FaHandPaper className = \"FaHand\"/>\r\n            </div></div>\r\n    <div class=\"col-4\"><div id=\"scissors\" className=\"choice\" onClick={() => this.handleClick('scissors')}>\r\n              <FaHandScissors className = \"FaHand\"/>\r\n            </div></div>\r\n           \r\n            </div>\r\n  </div>\r\n</div>\r\n      \r\n\r\n<div class=\"container mt-3\">\r\n<div class=\"d-flex justify-content-center bg-secondary mb-3\">\r\n    <div class=\"p-5S\"> \r\n<br></br>\r\n<div style ={{textAlign:\"center\"}}> <h3> AI </h3></div>\r\n<br></br>\r\n\r\n  </div>\r\n  </div>\r\n  </div>\r\n\r\n\r\n<div class=\"container mt-3\">\r\n<div class=\"d-flex justify-content-center bg-secondary mb-3\">\r\n    <div class=\"p-2  \">  <div > {this.state.showPopup ?<AI  prechoice ={ this.state.prechoice} choice={this.state.choice}/>: null}</div>\r\n    </div>\r\n\r\n  </div>\r\n  </div>\r\n\r\n        {this.pop()}\r\n             {this.state.showPopup && this.state.choice === true ? \r\n             (<Popup\r\n             playerChoice={this.state.playerValue}\r\n             computerChoice={this.state.computerValue}\r\n             winner={this.state.winner}/>): null\r\n             }\r\n    \r\n        \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}